    const int numMap[128] = {
    ['I'] = 1,
    ['V'] = 5,
    ['X'] = 10,
    ['L'] = 50,
    ['C'] = 100,
    ['D'] = 500,
    ['M'] = 1000,
};

class Solution {
public:
    int romanToInt(string s) {
        int ans = 0;
        int x = 0, prev = 0;

        for(const char& c: s)//引用原数组进行遍历操作
        {
            x = numMap[c];
            if(prev < x) ans -= 2 * prev;
            ans += x;
            prev = x;
        }
        return ans;
    }
};

//在这样的思路下，我们可以用后修正的方法来处理减法，即将每次读进来的数字都处理为加法，如果发现读进来的数字比上一个大，则减去上一个读进来的数字两次，这样上一个数字就相当于做了一次减法。这种方法处理第一次读入这个边界条件时，可以将上一个读进来的数字记为0，此时减去2 * 0对结果没有影响。
